name: Build and Deploy Backend

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      # 2️⃣ Set up JDK (เหมือนที่ Jenkins ใช้ Gradle)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3️⃣ Cache Gradle dependencies (optional แต่ช่วยให้ build เร็วขึ้น)
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4️⃣ Build with Gradle
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 5️⃣ Docker build
      - name: Build Docker image
        run: |
          docker --version
          docker compose build backend --no-cache

      # 6️⃣ Docker up (optional — ถ้าอยากทดสอบว่า container ทำงานได้)
      - name: Run Docker Compose
        run: docker compose up -d backend

      # 7️⃣ Verify container running
      - name: Check running containers
        run: docker ps -a

      # 8️⃣ Clean up (เหมือน cleanWs ใน Jenkins)
      - name: Clean workspace
        if: always()
        run: |
          docker compose down
          rm -rf build
